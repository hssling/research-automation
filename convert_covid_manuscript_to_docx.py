#!/usr/bin/env python3
"""
Convert COVID-19 Microbiome-Transcriptome Manuscript to DOCX
Simple script to convert our custom manuscript to Word format
"""

import os
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.enum.style import WD_STYLE_TYPE

def setup_document_styles(doc):
    """Setup document styles for manuscript formatting"""
    # Title style
    title_style = doc.styles.add_style('ManuscriptTitle', WD_STYLE_TYPE.PARAGRAPH)
    title_style.font.size = Pt(18)
    title_style.font.bold = True
    title_style.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Section header style
    section_style = doc.styles.add_style('ManuscriptSection', WD_STYLE_TYPE.PARAGRAPH)
    section_style.font.size = Pt(14)
    section_style.font.bold = True

    # Subsection style
    subsection_style = doc.styles.add_style('ManuscriptSubsection', WD_STYLE_TYPE.PARAGRAPH)
    subsection_style.font.size = Pt(12)
    subsection_style.font.bold = True

    # Normal text style
    normal_style = doc.styles.add_style('ManuscriptBody', WD_STYLE_TYPE.PARAGRAPH)
    normal_style.font.size = Pt(11)

def convert_markdown_text(content, doc):
    """Convert markdown content to DOCX format"""
    lines = content.split('\n')
    current_list = None
    in_code_block = False
    code_content = []

    for line in lines:
        line = line.rstrip()

        if not line.strip():
            if not in_code_block:
                doc.add_paragraph('')
            continue

        # Code block handling
        if line.strip().startswith('```'):
            if in_code_block:
                # End of code block
                code_text = '\n'.join(code_content)
                p = doc.add_paragraph(code_text)
                p.style = doc.styles['ManuscriptBody']
                p.paragraph_format.left_indent = Inches(0.25)
                in_code_block = False
                code_content = []
            else:
                # Start of code block
                in_code_block = True
            continue

        if in_code_block:
            code_content.append(line)
            continue

        # Headers
        if line.startswith('# Multi-Omics Integration'):
            p = doc.add_paragraph(line.lstrip('# '), style='ManuscriptTitle')
        elif line.startswith('## '):
            p = doc.add_paragraph(line[3:], style='ManuscriptSection')
        elif line.startswith('### '):
            p = doc.add_paragraph(line[4:], style='ManuscriptSubsection')
        elif line.startswith('#### ') or line.startswith('##### ') or line.startswith('###### '):
            p = doc.add_paragraph(line.lstrip('# '), style='ManuscriptBody')
            p.runs[0].bold = True

        # Lists
        elif line.strip().startswith('- ') or line.strip().startswith('* '):
            if current_list is None:
                current_list = doc.add_paragraph(style='ManuscriptBody')
            else:
                current_list = doc.add_paragraph(style='ManuscriptBody')
            current_list.add_run(line.strip()[2:])
            current_list.paragraph_format.left_indent = Inches(0.25)

        elif line.strip()[0].isdigit() and line.strip()[1] == '.':
            if current_list is None:
                current_list = doc.add_paragraph(style='ManuscriptBody')
            else:
                current_list = doc.add_paragraph(style='ManuscriptBody')
            current_list.add_run(line.strip())
            current_list.paragraph_format.left_indent = Inches(0.25)

        # Tables (basic handling)
        elif line.strip().startswith('|'):
            p = doc.add_paragraph(line.strip(), style='ManuscriptBody')

        else:
            # Regular paragraph
            p = doc.add_paragraph(line, style='ManuscriptBody')
            current_list = None

def create_cov_manuscript_docx():
    """Create DOCX document for COVID-19 microbiome-transcriptome manuscript"""

    print("üöÄ Converting COVID-19 microbiome manuscript to DOCX...")

    # Check if main manuscript exists
    main_file = "covid19_microbiome_transcriptome_manuscript.md"
    if not os.path.exists(main_file):
        print(f"‚ùå Could not find main manuscript: {main_file}")
        return False

    # Create new document
    doc = Document()
    setup_document_styles(doc)

    # Add title page
    title = doc.add_paragraph("Multi-Omics Integration of Gut Microbiome and Host Transcriptome", style='ManuscriptTitle')
    title.paragraph_format.space_after = Inches(0.5)

    subtitle = doc.add_paragraph("Reveals Predictive Signatures of COVID-19 Severity and Treatment Response", style='ManuscriptSection')
    subtitle.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Author info
    authors = doc.add_paragraph("\n\nManuscript Generated by Research Automation Framework", style='ManuscriptBody')
    authors.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    doc.add_page_break()

    # Table of Contents
    toc = doc.add_paragraph("Table of Contents", style='ManuscriptSection')
    toc_items = [
        "1. Abstract",
        "2. Introduction",
        "3. Methods",
        "4. Results",
        "5. Discussion",
        "6. Conclusions",
        "7. Supporting Materials (Supplementary)",
        "8. References"
    ]

    for item in toc_items:
        doc.add_paragraph(item, style='ManuscriptBody')

    doc.add_page_break()

    # Convert main manuscript
    print(f"üìÑ Converting main manuscript: {main_file}")
    try:
        with open(main_file, 'r', encoding='utf-8') as f:
            content = f.read()
        convert_markdown_text(content, doc)
    except Exception as e:
        print(f"‚ùå Error reading manuscript: {e}")
        return False

    doc.add_page_break()

    # Add supporting documents
    supporting_files = [
        ("supplementary_materials", "covid19_microbiome_supplementary_materials.md"),
        ("validation_report", "covid19_microbiome_validation_report.md"),
        ("executive_summary", "covid19_microbiome_executive_summary.md")
    ]

    for category, file_path in supporting_files:
        if os.path.exists(file_path):
            print(f"üìã Adding {category}: {file_path}")
            doc.add_paragraph(f"{category.replace('_', ' ').title()}", style='ManuscriptSection')

            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                convert_markdown_text(content, doc)
                doc.add_page_break()
            except Exception as e:
                print(f"‚ùå Error reading {file_path}: {e}")
                doc.add_paragraph(f"Error loading {file_path}: {str(e)}", style='ManuscriptBody')

    # References
    ref_file = "covid19_microbiome_references.bib"
    if os.path.exists(ref_file):
        print(f"üìö Adding references: {ref_file}")
        doc.add_paragraph("References", style='ManuscriptSection')

        try:
            with open(ref_file, 'r', encoding='utf-8') as f:
                content = f.read()
            doc.add_paragraph(content, style='ManuscriptBody')
        except Exception as e:
            print(f"‚ùå Error reading references: {e}")

    # Save document
    output_file = "covid19_microbiome_transcriptome_manuscript.docx"
    try:
        doc.save(output_file)
        print(f"‚úÖ Successfully created DOCX: {output_file}")
        print("   üìä Complete manuscript with all supporting materials included")
        return True
    except Exception as e:
        print(f"‚ùå Error saving {output_file}: {e}")
        return False

if __name__ == '__main__':
    success = create_cov_manuscript_docx()
    if success:
        print("\nüéâ Conversion complete! Your manuscript is ready for:")
        print("   ‚Ä¢ Peer review submission")
        print("   ‚Ä¢ Grant applications")
        print("   ‚Ä¢ Scientific presentations")
        print("   ‚Ä¢ Global research dissemination")
    else:
        print("\n‚ùå Conversion failed. Please check for any missing files.")
