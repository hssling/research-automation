name: Deploy to Streamlit Cloud

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python -c "
        import streamlit as st
        import pandas as pd
        import numpy as np
        import plotly.graph_objects as go
        print('‚úÖ All required packages available')

        # Basic functionality test
        df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df['A'], y=df['B']))
        print('‚úÖ Data visualization works')

        # Test auto-updater import
        from auto_data_updater import AutoDataUpdater
        updater = AutoDataUpdater()
        print('‚úÖ Auto-updater initializes successfully')

        print('üß™ All core functionality tests passed!')
        "

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Create packages.txt for Streamlit Cloud
      run: |
        echo "# Core Python packages" > packages.txt
        cat requirements.txt >> packages.txt
        echo "" >> packages.txt
        echo "# Additional packages for Streamlit Cloud" >> packages.txt
        echo "streamlit==1.28.1" >> packages.txt
        echo "plotly==5.17.0" >> packages.txt
        echo "pandas==2.1.3" >> packages.txt
        echo "numpy==1.24.3" >> packages.txt
        echo "requests==2.31.0" >> packages.txt
        echo "prophet==1.1.5" >> packages.txt
        echo "statsmodels==0.14.1" >> packages.txt
        echo "scikit-learn==1.3.2" >> packages.txt
        echo "tensorflow==2.14.0" >> packages.txt
        echo "keras==2.14.0" >> packages.txt

    - name: Deploy to Streamlit Cloud
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "Deployment will be triggered automatically via Streamlit Cloud."
        echo "Streamlit app configured with:"
        echo "- Entry point: measles_dashboard.py"
        echo "- Python 3.9 runtime"
        echo "- Headless server configuration"
        echo "- Real-time auto-updates enabled"

    - name: Notify deployment status
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "üì± Streamlit App Ready for Deployment"
        echo "To manually deploy:"
        echo "1. Go to share.streamlit.io"
        echo "2. Connect your GitHub account: hssling/measles-india-incidence-timeseries-forecast-dashboard"
        echo "3. Select main branch and measles_dashboard.py as entry point"
        echo "4. Configure with the generated packages.txt"
        echo ""
        echo "Live URL will be generated automatically after deployment."

  health-check:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Health Check Notification
      run: |
        echo "üîÑ Deployed Application Health Status:"
        echo "‚úÖ GitHub Actions CI passed"
        echo "‚úÖ Dependencies installed successfully"
        echo "‚ö†Ô∏è  Manual deployment to Streamlit Cloud required:"
        echo "   https://share.streamlit.io"
        echo "   Repository: hssling/measles-india-incidence-timeseries-forecast-dashboard"
        echo ""
        echo "üéØ Expected Live URL (after manual deployment):"
        echo "   https://hssling-measles-india-incidence-timeseries-forecast-dashboard.streamlit.app"
        echo ""
        echo "üìä Dashboard Features:"
        echo "- Real-time WHO data integration"
        echo "- Continuous auto-updates (6-hour cycles)"
        echo "- Multi-model forecasting (ARIMA, Prophet, LSTM)"
        echo "- Interactive sensitivity analysis"
        echo "- Automated research manuscript generation"
